name: "test"
on:
  push:
    branches:
      - '*'
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 20.x ]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Test
        run: npm run test
  functionalSelfTest:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        node-version: [ 20.x ]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Pack
        run: npm run pack

      - id: getNextAttemptNumber
        name: Simple math test
        uses: ./
        env:
          STEP_SIZE: 2
        with:
          data: '8'
          expression: "parseInt(inputs.data) + parseInt(env.STEP_SIZE)"

      - name: Check getNextAttemptNumber result
        if: steps.getNextAttemptNumber.outputs.result != '10'
        run: exit 1
        
      - id: failedInputValidation
        name: Failed input validation
        uses: ./
        continue-on-error: true
        env:
          attempt: 3
          max: 2
        with:
          expression: |
            {
              const attempt = parseInt(env.attempt), max = parseInt(env.max);
              assert(attempt && max && max >= attempt);
            }

      - name: Check failedValidateInput result
        if: steps.failedInputValidation.outcome == 'success'
        run: exit 1

      - id: successInputValidation
        name: Success input validation
        uses: ./
        env:
          attempt: 2
          max: 3
        with:
          expression: |
            {
              const attempt = parseInt(env.attempt), max = parseInt(env.max);
              assert(attempt && max && max >= attempt);
            }        

      - id: checkNewVersion
        name: Check new version test using semver
        uses: ./
        env:
          OLD_VERSION: 1.2.3
          NEW_VERSION: 1.3.0
        with:
          expression: |
            ({ 
              greater: semver.gte(env.NEW_VERSION, env.OLD_VERSION), 
              compatible: semver.major(env.NEW_VERSION) === semver.major(env.OLD_VERSION)
            })
          extractOutputs: 'true'

      - name: Check checkNewVersion result
        if: steps.checkNewVersion.outputs.greater != 'true' || steps.checkNewVersion.outputs.compatible != 'true'
        run: exit 1

      - id: jsonExample
        name: Json example test
        uses: ./
        env:
          MY_VAR: '{"a": "hello", "b": "hell"}'
        with:
          jsonEnvs: MY_VAR
          expression: "env.MY_VAR.a.indexOf(env.MY_VAR.b) !== -1"

      - name: Check jsonExample result
        if: steps.jsonExample.outputs.result != 'true'
        run: exit 1

      - id: getDefaultBranch
        name: Get default branch test
        uses: ./
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          expression: |
            (await octokit.rest.repos.get({
              owner: context.repo.owner, 
              repo: context.repo.repo
            })).data.default_branch

      - name: Check getDefaultBranch result
        if: steps.getDefaultBranch.outputs.result != 'master'
        run: exit 1

      - id: readYamlExample
        name: Read yaml test
        uses: ./
        with:
          expression: 'yaml.parse((await fs.readFile("action.yml")).toString()).name'

      - name: Check getDefaultBranch result
        if: steps.readYamlExample.outputs.result != 'js-eval-action'
        run: exit 1

      - id: exportDotEnv
        name: Export env variables from env file
        uses: ./
        env:
          ENV_FILE_PATH: tests/integration/values.env
        with:
          expression: |
            Object.entries(
              dotenvExpand({
                parsed: dotenv.parse(fs.readFileSync(env.ENV_FILE_PATH))
              })
              .parsed
            ).forEach(e => core.exportVariable(e[0], e[1]))

      - name: Check exportDotEnv result
        if: env.VALUE1 != 'abc' || env.VALUE2 != '123abc456'
        run: exit 1

      - id: useJsFile
        name: Use jsFile input
        uses: ./
        with:
          jsFile: tests/integration/evaluateJsFileCases/complicated.js

      - name: Check useJsFile result
        if: steps.useJsFile.outputs.result != 22
        run: exit 1